// Code generated by go-bindata.
// sources:
// config/basic/profiles/main/basic.ini
// config/basic/profiles/main/service.json
// config/basic/scenes/Untitled.json
// config/global.ini
// DO NOT EDIT!

package obs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configBasicProfilesMainBasicIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x76\x4f\xcd\x4b\x2d\x4a\xcc\x89\xe5\xf2\x4b\xcc\x4d\xb5\xcd\x4d\xcc\xcc\xe3\x02\x04\x00\x00\xff\xff\x17\x43\x07\xa9\x14\x00\x00\x00")

func configBasicProfilesMainBasicIniBytes() ([]byte, error) {
	return bindataRead(
		_configBasicProfilesMainBasicIni,
		"config/basic/profiles/main/basic.ini",
	)
}

func configBasicProfilesMainBasicIni() (*asset, error) {
	bytes, err := configBasicProfilesMainBasicIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/basic/profiles/main/basic.ini", size: 20, mode: os.FileMode(420), modTime: time.Unix(1493000883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configBasicProfilesMainServiceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\x2a\x4e\x2d\x29\xc9\xcc\x4b\x2f\x56\xb2\x52\x80\x88\x80\x45\xb3\x53\x2b\x95\xac\x14\x94\xaa\xab\xf5\x82\x4b\x8a\x52\x13\x73\xbd\x53\x2b\x6b\x6b\x95\x74\x10\x0a\x8a\x53\x8b\xca\x52\x8b\x50\xd4\x84\x16\xe5\xd4\xd6\x2a\x81\x95\xd4\x42\x54\x2a\x95\x54\x16\xa4\x82\xd4\x14\x95\xe4\x16\xc4\x27\x97\x16\x97\xe4\xe7\x2a\x71\xd5\x72\x01\x02\x00\x00\xff\xff\xe3\x72\x2f\x57\x7b\x00\x00\x00")

func configBasicProfilesMainServiceJsonBytes() ([]byte, error) {
	return bindataRead(
		_configBasicProfilesMainServiceJson,
		"config/basic/profiles/main/service.json",
	)
}

func configBasicProfilesMainServiceJson() (*asset, error) {
	bytes, err := configBasicProfilesMainServiceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/basic/profiles/main/service.json", size: 123, mode: os.FileMode(420), modTime: time.Unix(1493003019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configBasicScenesUntitledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x10\x78\xce\xba\xf6\xa6\xdb\x6e\xf7\xb6\x69\xb6\xe8\x25\x29\x50\xb5\xa7\x24\x20\x68\x72\x6c\xb3\xa6\x48\x95\x1c\xfa\x81\x62\xff\x7b\x41\x49\x96\x25\xea\x61\x25\xd8\x16\x7d\xac\x4f\x86\xe6\x9b\x07\x67\x3e\x92\x1f\xff\xb8\x4a\x92\x24\x21\x0f\xfe\xf0\xe0\x85\x34\x6f\x61\x27\x39\x2c\xc8\x7d\x52\x1a\x0a\xa3\x00\xa9\x11\xac\x62\x1c\xe8\x4a\x82\x12\xd4\x58\x01\x96\xdc\x27\xf3\x57\xfd\xa8\xcc\x08\x88\xcc\xa0\xd9\x52\x81\x20\xf7\x09\x5a\x0f\x0d\xc3\x4a\xb1\xb5\x8b\xc0\x1b\x83\x5b\x38\xba\x56\x19\x85\x41\xc9\xa5\x59\xba\x59\xe6\x31\xc4\xff\xf0\xe9\x55\xaf\x39\xf7\x6e\x73\x8d\xe6\x7a\x22\x0c\x99\xda\x8e\xc0\xbc\xae\xe3\xd4\xf6\xa7\x46\xb1\x32\x2c\x8a\xe4\x5e\x39\xa0\x52\xe7\x1e\x29\x67\x39\x7a\x0b\xa4\x01\xca\xe4\x01\x6c\x58\xd0\xcd\xed\x6d\xf3\xb3\xd1\x12\x8d\x95\x7a\x4d\xf1\x98\xc7\x3d\x0b\x79\x43\xf0\x15\x53\xae\xd9\x32\xcd\xb2\x00\x25\xef\x24\xff\xea\xc1\x1f\x9a\x79\xa2\xa5\xc7\x9e\x4d\xf3\xb5\x00\xc5\x8e\x51\xca\xa8\x27\x43\xfe\xc1\xdc\xeb\xef\x00\x51\xea\x75\xcf\xe8\x44\x41\x2d\x5a\x76\x4b\xc0\x8a\x79\x85\xa4\xb7\xa1\xee\xa8\x79\x14\x76\x67\x94\x2f\xd6\xbc\x98\xcd\xaf\x1a\x78\xf2\x16\xdc\x16\x4d\xfe\x42\xde\x67\x20\xaf\xf1\xf8\x77\xb2\xb7\x1a\x5d\x52\xcc\xee\xff\xcc\x61\xee\xad\x05\x8d\x34\xb7\x66\x6d\x59\x46\x1d\x07\x5d\x74\x28\x2d\xfe\x44\xa8\x71\x2b\x5a\xa6\x9d\x44\x69\x74\x80\xfc\xc0\x44\x8d\xc8\x8c\xf0\x0a\xda\x8b\x22\xe5\xc8\xaf\x51\x66\xc5\x96\x88\x96\xcb\x3c\x9a\x14\x99\xc5\x9f\x81\x1b\x2b\x7e\xa9\x50\x51\x43\xdb\xd0\x14\x2d\xb0\x6c\x0c\x6a\xcf\xc1\x7e\x34\xde\x46\xdb\x27\x86\xbc\x93\xda\x23\x5c\x00\xa5\xc0\x8d\x16\x01\xf4\x3a\x46\xb9\x73\x3d\x43\xd9\x1a\x90\xe1\x6c\x0d\x50\x33\xdb\x79\xf8\xad\x91\x9e\x38\xfe\xab\x46\x89\xe1\xe4\xa8\xbe\xe7\x16\x76\x12\xf6\x54\x19\xbe\x8d\x37\x07\xf9\xdd\x4b\xbe\x6d\x4c\x30\x64\xf8\x50\x27\x88\xa9\xe8\x2d\xab\xc6\xfc\x7a\x1e\x17\x7b\x3e\x82\x3a\xe7\x42\xc1\xdd\x45\xf4\xf1\x54\xee\xf7\xbe\x9f\xce\xcf\x99\xfb\x66\x20\x77\xc1\xd5\xa8\x9d\x55\x00\xe2\xd8\x0e\x04\x3d\x35\x2f\xb7\xe6\x37\xe0\x68\xec\x68\x83\x46\x7c\xe6\x13\xd6\xf8\xe2\xfe\xe2\x3e\xec\xde\xcb\xce\xcf\x61\x65\x03\x4b\xa6\x6c\xb9\x17\xbf\xff\xb4\x5f\x9b\x4f\x9c\xa9\xa0\xa9\xda\x42\x94\x14\x17\x7f\xad\x5e\x07\x19\x76\x3a\x4f\x4b\x79\x30\x94\xc2\x78\xcb\x61\xfc\x82\x99\x22\x9c\x3b\xc8\xae\x78\x4e\xc6\x04\x74\x32\x20\xa2\x93\x48\x48\x3f\xf5\xdd\x24\xe4\xc0\x4d\x96\x1b\x27\xb1\x7a\x78\x91\x08\x55\xcb\xd6\x38\xf2\xa8\x70\x4d\x46\xc4\x6b\xab\xc3\xef\x1f\xd3\xe4\x31\xf3\x8a\xa1\xb1\x71\xea\x71\x0d\xdb\x81\xf4\xe9\xd0\xe4\xb2\x96\xed\x40\x06\xe3\x0c\x6a\xda\xc2\x5a\x49\x7e\xba\x97\x5a\x98\x7d\x58\xdb\xed\xcd\xd7\x37\x77\x77\xf3\x6f\x3f\xda\x8f\x7a\x25\x35\x53\x74\xc5\x34\x32\x77\x9c\x69\x70\xe1\xe3\xfb\xc7\x34\x5a\x73\x99\x67\xcf\x72\x6a\x41\x2c\x95\x87\x6a\xda\x2d\x50\x3c\xc8\xae\x4e\x4e\x7a\xb5\x72\x32\x2e\x48\xfe\x49\x5c\xed\x36\xe5\xa7\x37\xe9\x1b\xe6\x24\x9f\xa5\xa0\x80\x63\x5a\x29\xf8\x58\x1f\x25\x8d\x77\xdb\x46\x0a\x28\xa5\x3e\x95\x08\xd9\xac\xc5\xb5\x71\x57\xb7\x31\xfb\x51\xd7\xd1\x81\x94\x3b\xcb\x35\xde\x16\xb5\xe9\x2f\xde\x4e\x69\x5f\xce\x7f\xd7\x3e\x0a\xfd\x6e\x1f\xaa\xcd\x5f\xd7\xa1\x76\x64\x4a\xae\x83\x9c\xbe\xed\x8e\xb5\xc6\x2c\x8d\x2f\x5f\x1d\xc3\x71\x0a\xdc\x21\x94\x3d\x9b\x0f\x47\x2a\x50\xc7\x12\x35\x08\x7a\xba\x58\x09\x3d\x15\x3d\x92\xea\x04\xed\xa7\x45\x0b\xc9\xad\xc9\xe9\xd2\x20\x9a\x6c\x0a\x52\xc1\x0a\xa7\xe0\xac\x5c\x6f\x26\x01\xd1\xe4\x17\x60\x13\xce\xfd\x16\x3e\x37\x13\xa7\xb5\x98\x7f\x33\x69\x5e\x77\xdf\x7d\xe1\xc0\xac\xc1\x4b\xa4\x28\x54\x07\x4c\xac\x77\x52\xb5\x8b\x2f\x2c\xb6\x28\x84\xae\xa4\xc2\xe2\x04\x27\x42\xba\x70\x20\x8f\x75\x7a\x27\x9d\x5c\xaa\xde\x0b\xa7\xce\xd8\xf9\x3a\x7e\x0e\x7e\xd6\xc5\xd4\xd2\x56\xe7\x07\x3c\xed\x7b\x28\x93\xe8\x81\xff\xe9\xea\xe9\xcf\x00\x00\x00\xff\xff\x2a\x53\xb1\x49\x85\x17\x00\x00")

func configBasicScenesUntitledJsonBytes() ([]byte, error) {
	return bindataRead(
		_configBasicScenesUntitledJson,
		"config/basic/scenes/Untitled.json",
	)
}

func configBasicScenesUntitledJson() (*asset, error) {
	bytes, err := configBasicScenesUntitledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/basic/scenes/Untitled.json", size: 6021, mode: os.FileMode(420), modTime: time.Unix(1493000883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGlobalIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcb\x6e\xc2\x30\x10\x45\xf7\xfe\x9a\x40\x5f\x61\xe1\xc5\x04\x68\x37\xb4\x4d\x45\x5b\xa4\x22\x16\xc6\x1e\xa2\x91\x1c\xdb\xb2\x87\xba\xf9\xfb\x0a\x42\x1a\x54\xef\xee\x39\x63\x5f\x8d\xb7\x4f\xe8\x30\x2a\xbb\x13\x2b\xd2\xe8\x12\x82\xd6\x18\x18\x8d\xe4\x78\x44\xb1\x52\x89\x3f\x31\x26\xf2\x4e\xde\x14\x93\x59\x39\x2b\xcb\x99\x10\xdb\x3a\xfa\x80\x91\x09\xd3\x86\x9c\xf1\x79\x27\xf4\x8f\x7c\x98\x16\x42\x77\xf2\xae\x2c\x84\xd8\x56\x2a\x91\x1e\x64\x83\xbe\x45\x8e\x9d\x04\xe3\xde\xba\x0c\x73\x18\x4f\xd5\x65\x80\xea\xab\x04\x80\x97\x7c\x26\x0d\x00\xe8\x04\x00\x1b\x03\x00\x8b\x7d\x73\x35\xac\x40\x8a\x14\x2c\x31\x63\x7c\xf7\x41\x4e\x8b\xf2\x2f\x57\x9e\xd9\xb7\x72\x72\x7b\x2f\xea\x88\xdf\x84\x79\xe9\xd4\xde\x0e\xbb\x80\xcd\xaa\x4b\xaf\xee\x74\xed\xa0\x6c\x42\xb1\xd6\xe8\x70\x71\x0c\x96\xb4\x62\xf2\xee\xd9\x1b\xec\x67\xd7\x59\x85\xb3\x4d\x23\x5b\x1a\xe2\x71\xef\x33\xef\x9f\xb9\x94\xd5\xd1\x37\x51\xb5\x57\xe2\xf2\x0b\xbb\xbe\x68\xee\xad\x45\x7d\xea\x91\x1f\x8e\x89\x2d\x9a\xff\xe2\x91\x2c\x8e\xb2\x8e\xfe\x70\x02\xad\x22\x37\x84\x05\xc5\x3e\xff\x06\x00\x00\xff\xff\x8f\xc6\xac\x4f\xb9\x01\x00\x00")

func configGlobalIniBytes() ([]byte, error) {
	return bindataRead(
		_configGlobalIni,
		"config/global.ini",
	)
}

func configGlobalIni() (*asset, error) {
	bytes, err := configGlobalIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/global.ini", size: 441, mode: os.FileMode(420), modTime: time.Unix(1493000883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/basic/profiles/main/basic.ini": configBasicProfilesMainBasicIni,
	"config/basic/profiles/main/service.json": configBasicProfilesMainServiceJson,
	"config/basic/scenes/Untitled.json": configBasicScenesUntitledJson,
	"config/global.ini": configGlobalIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"basic": &bintree{nil, map[string]*bintree{
			"profiles": &bintree{nil, map[string]*bintree{
				"main": &bintree{nil, map[string]*bintree{
					"basic.ini": &bintree{configBasicProfilesMainBasicIni, map[string]*bintree{}},
					"service.json": &bintree{configBasicProfilesMainServiceJson, map[string]*bintree{}},
				}},
			}},
			"scenes": &bintree{nil, map[string]*bintree{
				"Untitled.json": &bintree{configBasicScenesUntitledJson, map[string]*bintree{}},
			}},
		}},
		"global.ini": &bintree{configGlobalIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

